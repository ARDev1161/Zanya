// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensors.proto

#include "sensors.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_sensors_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProtobufSensors_Accelerometer;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProtobufSensors_Gyroscope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProtobufSensors_Misc;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProtobufSensors_MotorEncoders;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProtobufSensors_Temperature;
}  // namespace protobuf_sensors_2eproto
class ProtobufSensors_AccelerometerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtobufSensors_Accelerometer>
      _instance;
} _ProtobufSensors_Accelerometer_default_instance_;
class ProtobufSensors_GyroscopeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtobufSensors_Gyroscope>
      _instance;
} _ProtobufSensors_Gyroscope_default_instance_;
class ProtobufSensors_MotorEncodersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtobufSensors_MotorEncoders>
      _instance;
} _ProtobufSensors_MotorEncoders_default_instance_;
class ProtobufSensors_TemperatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtobufSensors_Temperature>
      _instance;
} _ProtobufSensors_Temperature_default_instance_;
class ProtobufSensors_MiscDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtobufSensors_Misc>
      _instance;
} _ProtobufSensors_Misc_default_instance_;
class ProtobufSensorsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtobufSensors>
      _instance;
} _ProtobufSensors_default_instance_;
namespace protobuf_sensors_2eproto {
static void InitDefaultsProtobufSensors_Accelerometer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtobufSensors_Accelerometer_default_instance_;
    new (ptr) ::ProtobufSensors_Accelerometer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtobufSensors_Accelerometer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProtobufSensors_Accelerometer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtobufSensors_Accelerometer}, {}};

static void InitDefaultsProtobufSensors_Gyroscope() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtobufSensors_Gyroscope_default_instance_;
    new (ptr) ::ProtobufSensors_Gyroscope();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtobufSensors_Gyroscope::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProtobufSensors_Gyroscope =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtobufSensors_Gyroscope}, {}};

static void InitDefaultsProtobufSensors_MotorEncoders() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtobufSensors_MotorEncoders_default_instance_;
    new (ptr) ::ProtobufSensors_MotorEncoders();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtobufSensors_MotorEncoders::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProtobufSensors_MotorEncoders =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtobufSensors_MotorEncoders}, {}};

static void InitDefaultsProtobufSensors_Temperature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtobufSensors_Temperature_default_instance_;
    new (ptr) ::ProtobufSensors_Temperature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtobufSensors_Temperature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProtobufSensors_Temperature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtobufSensors_Temperature}, {}};

static void InitDefaultsProtobufSensors_Misc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtobufSensors_Misc_default_instance_;
    new (ptr) ::ProtobufSensors_Misc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtobufSensors_Misc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProtobufSensors_Misc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtobufSensors_Misc}, {}};

static void InitDefaultsProtobufSensors() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtobufSensors_default_instance_;
    new (ptr) ::ProtobufSensors();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtobufSensors::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_ProtobufSensors =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsProtobufSensors}, {
      &protobuf_sensors_2eproto::scc_info_ProtobufSensors_Accelerometer.base,
      &protobuf_sensors_2eproto::scc_info_ProtobufSensors_Gyroscope.base,
      &protobuf_sensors_2eproto::scc_info_ProtobufSensors_MotorEncoders.base,
      &protobuf_sensors_2eproto::scc_info_ProtobufSensors_Temperature.base,
      &protobuf_sensors_2eproto::scc_info_ProtobufSensors_Misc.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ProtobufSensors_Accelerometer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProtobufSensors_Gyroscope.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProtobufSensors_MotorEncoders.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProtobufSensors_Temperature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProtobufSensors_Misc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProtobufSensors.base);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors_Accelerometer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors_Accelerometer, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors_Accelerometer, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors_Accelerometer, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors_Gyroscope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors_Gyroscope, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors_Gyroscope, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors_Gyroscope, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors_MotorEncoders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors_MotorEncoders, langle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors_MotorEncoders, rangle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors_Temperature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors_Temperature, tempaccelerometer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors_Temperature, tempcpu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors_Temperature, temppressure_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors_Misc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors_Misc, gas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors_Misc, batteryvoltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors_Misc, pressure_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors, accelerometer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors, gyroscope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors, motorencoders_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors, temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProtobufSensors, misc_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ProtobufSensors_Accelerometer)},
  { 8, -1, sizeof(::ProtobufSensors_Gyroscope)},
  { 16, -1, sizeof(::ProtobufSensors_MotorEncoders)},
  { 23, -1, sizeof(::ProtobufSensors_Temperature)},
  { 31, -1, sizeof(::ProtobufSensors_Misc)},
  { 39, -1, sizeof(::ProtobufSensors)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ProtobufSensors_Accelerometer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ProtobufSensors_Gyroscope_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ProtobufSensors_MotorEncoders_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ProtobufSensors_Temperature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ProtobufSensors_Misc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ProtobufSensors_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sensors.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rsensors.proto\"\247\004\n\017ProtobufSensors\0225\n\ra"
      "ccelerometer\030\001 \001(\0132\036.ProtobufSensors.Acc"
      "elerometer\022-\n\tgyroscope\030\002 \001(\0132\032.Protobuf"
      "Sensors.Gyroscope\0225\n\rmotorEncoders\030\003 \001(\013"
      "2\036.ProtobufSensors.MotorEncoders\0221\n\013temp"
      "erature\030\004 \001(\0132\034.ProtobufSensors.Temperat"
      "ure\022#\n\004misc\030\005 \001(\0132\025.ProtobufSensors.Misc"
      "\0320\n\rAccelerometer\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022"
      "\t\n\001z\030\003 \001(\002\032,\n\tGyroscope\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030"
      "\002 \001(\002\022\t\n\001z\030\003 \001(\002\032/\n\rMotorEncoders\022\016\n\006lAn"
      "gle\030\001 \001(\005\022\016\n\006rAngle\030\002 \001(\005\032O\n\013Temperature"
      "\022\031\n\021tempAccelerometer\030\001 \001(\005\022\017\n\007tempCPU\030\002"
      " \001(\005\022\024\n\014tempPressure\030\003 \001(\005\032=\n\004Misc\022\013\n\003ga"
      "s\030\001 \001(\005\022\026\n\016batteryVoltage\030\002 \001(\005\022\020\n\010press"
      "ure\030\003 \001(\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 577);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensors.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sensors_2eproto

// ===================================================================

void ProtobufSensors_Accelerometer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtobufSensors_Accelerometer::kXFieldNumber;
const int ProtobufSensors_Accelerometer::kYFieldNumber;
const int ProtobufSensors_Accelerometer::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtobufSensors_Accelerometer::ProtobufSensors_Accelerometer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensors_2eproto::scc_info_ProtobufSensors_Accelerometer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtobufSensors.Accelerometer)
}
ProtobufSensors_Accelerometer::ProtobufSensors_Accelerometer(const ProtobufSensors_Accelerometer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:ProtobufSensors.Accelerometer)
}

void ProtobufSensors_Accelerometer::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

ProtobufSensors_Accelerometer::~ProtobufSensors_Accelerometer() {
  // @@protoc_insertion_point(destructor:ProtobufSensors.Accelerometer)
  SharedDtor();
}

void ProtobufSensors_Accelerometer::SharedDtor() {
}

void ProtobufSensors_Accelerometer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProtobufSensors_Accelerometer::descriptor() {
  ::protobuf_sensors_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensors_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtobufSensors_Accelerometer& ProtobufSensors_Accelerometer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensors_2eproto::scc_info_ProtobufSensors_Accelerometer.base);
  return *internal_default_instance();
}


void ProtobufSensors_Accelerometer::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtobufSensors.Accelerometer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool ProtobufSensors_Accelerometer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtobufSensors.Accelerometer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtobufSensors.Accelerometer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtobufSensors.Accelerometer)
  return false;
#undef DO_
}

void ProtobufSensors_Accelerometer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtobufSensors.Accelerometer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtobufSensors.Accelerometer)
}

::google::protobuf::uint8* ProtobufSensors_Accelerometer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ProtobufSensors.Accelerometer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtobufSensors.Accelerometer)
  return target;
}

size_t ProtobufSensors_Accelerometer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtobufSensors.Accelerometer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtobufSensors_Accelerometer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtobufSensors.Accelerometer)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtobufSensors_Accelerometer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtobufSensors_Accelerometer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtobufSensors.Accelerometer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtobufSensors.Accelerometer)
    MergeFrom(*source);
  }
}

void ProtobufSensors_Accelerometer::MergeFrom(const ProtobufSensors_Accelerometer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtobufSensors.Accelerometer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void ProtobufSensors_Accelerometer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtobufSensors.Accelerometer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtobufSensors_Accelerometer::CopyFrom(const ProtobufSensors_Accelerometer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtobufSensors.Accelerometer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufSensors_Accelerometer::IsInitialized() const {
  return true;
}

void ProtobufSensors_Accelerometer::Swap(ProtobufSensors_Accelerometer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtobufSensors_Accelerometer::InternalSwap(ProtobufSensors_Accelerometer* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProtobufSensors_Accelerometer::GetMetadata() const {
  protobuf_sensors_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensors_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProtobufSensors_Gyroscope::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtobufSensors_Gyroscope::kXFieldNumber;
const int ProtobufSensors_Gyroscope::kYFieldNumber;
const int ProtobufSensors_Gyroscope::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtobufSensors_Gyroscope::ProtobufSensors_Gyroscope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensors_2eproto::scc_info_ProtobufSensors_Gyroscope.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtobufSensors.Gyroscope)
}
ProtobufSensors_Gyroscope::ProtobufSensors_Gyroscope(const ProtobufSensors_Gyroscope& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:ProtobufSensors.Gyroscope)
}

void ProtobufSensors_Gyroscope::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

ProtobufSensors_Gyroscope::~ProtobufSensors_Gyroscope() {
  // @@protoc_insertion_point(destructor:ProtobufSensors.Gyroscope)
  SharedDtor();
}

void ProtobufSensors_Gyroscope::SharedDtor() {
}

void ProtobufSensors_Gyroscope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProtobufSensors_Gyroscope::descriptor() {
  ::protobuf_sensors_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensors_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtobufSensors_Gyroscope& ProtobufSensors_Gyroscope::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensors_2eproto::scc_info_ProtobufSensors_Gyroscope.base);
  return *internal_default_instance();
}


void ProtobufSensors_Gyroscope::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtobufSensors.Gyroscope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool ProtobufSensors_Gyroscope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtobufSensors.Gyroscope)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtobufSensors.Gyroscope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtobufSensors.Gyroscope)
  return false;
#undef DO_
}

void ProtobufSensors_Gyroscope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtobufSensors.Gyroscope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtobufSensors.Gyroscope)
}

::google::protobuf::uint8* ProtobufSensors_Gyroscope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ProtobufSensors.Gyroscope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtobufSensors.Gyroscope)
  return target;
}

size_t ProtobufSensors_Gyroscope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtobufSensors.Gyroscope)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtobufSensors_Gyroscope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtobufSensors.Gyroscope)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtobufSensors_Gyroscope* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtobufSensors_Gyroscope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtobufSensors.Gyroscope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtobufSensors.Gyroscope)
    MergeFrom(*source);
  }
}

void ProtobufSensors_Gyroscope::MergeFrom(const ProtobufSensors_Gyroscope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtobufSensors.Gyroscope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void ProtobufSensors_Gyroscope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtobufSensors.Gyroscope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtobufSensors_Gyroscope::CopyFrom(const ProtobufSensors_Gyroscope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtobufSensors.Gyroscope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufSensors_Gyroscope::IsInitialized() const {
  return true;
}

void ProtobufSensors_Gyroscope::Swap(ProtobufSensors_Gyroscope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtobufSensors_Gyroscope::InternalSwap(ProtobufSensors_Gyroscope* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProtobufSensors_Gyroscope::GetMetadata() const {
  protobuf_sensors_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensors_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProtobufSensors_MotorEncoders::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtobufSensors_MotorEncoders::kLAngleFieldNumber;
const int ProtobufSensors_MotorEncoders::kRAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtobufSensors_MotorEncoders::ProtobufSensors_MotorEncoders()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensors_2eproto::scc_info_ProtobufSensors_MotorEncoders.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtobufSensors.MotorEncoders)
}
ProtobufSensors_MotorEncoders::ProtobufSensors_MotorEncoders(const ProtobufSensors_MotorEncoders& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&langle_, &from.langle_,
    static_cast<size_t>(reinterpret_cast<char*>(&rangle_) -
    reinterpret_cast<char*>(&langle_)) + sizeof(rangle_));
  // @@protoc_insertion_point(copy_constructor:ProtobufSensors.MotorEncoders)
}

void ProtobufSensors_MotorEncoders::SharedCtor() {
  ::memset(&langle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rangle_) -
      reinterpret_cast<char*>(&langle_)) + sizeof(rangle_));
}

ProtobufSensors_MotorEncoders::~ProtobufSensors_MotorEncoders() {
  // @@protoc_insertion_point(destructor:ProtobufSensors.MotorEncoders)
  SharedDtor();
}

void ProtobufSensors_MotorEncoders::SharedDtor() {
}

void ProtobufSensors_MotorEncoders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProtobufSensors_MotorEncoders::descriptor() {
  ::protobuf_sensors_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensors_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtobufSensors_MotorEncoders& ProtobufSensors_MotorEncoders::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensors_2eproto::scc_info_ProtobufSensors_MotorEncoders.base);
  return *internal_default_instance();
}


void ProtobufSensors_MotorEncoders::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtobufSensors.MotorEncoders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&langle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rangle_) -
      reinterpret_cast<char*>(&langle_)) + sizeof(rangle_));
  _internal_metadata_.Clear();
}

bool ProtobufSensors_MotorEncoders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtobufSensors.MotorEncoders)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 lAngle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &langle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rAngle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtobufSensors.MotorEncoders)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtobufSensors.MotorEncoders)
  return false;
#undef DO_
}

void ProtobufSensors_MotorEncoders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtobufSensors.MotorEncoders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lAngle = 1;
  if (this->langle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->langle(), output);
  }

  // int32 rAngle = 2;
  if (this->rangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rangle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtobufSensors.MotorEncoders)
}

::google::protobuf::uint8* ProtobufSensors_MotorEncoders::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ProtobufSensors.MotorEncoders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lAngle = 1;
  if (this->langle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->langle(), target);
  }

  // int32 rAngle = 2;
  if (this->rangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rangle(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtobufSensors.MotorEncoders)
  return target;
}

size_t ProtobufSensors_MotorEncoders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtobufSensors.MotorEncoders)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 lAngle = 1;
  if (this->langle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->langle());
  }

  // int32 rAngle = 2;
  if (this->rangle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rangle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtobufSensors_MotorEncoders::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtobufSensors.MotorEncoders)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtobufSensors_MotorEncoders* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtobufSensors_MotorEncoders>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtobufSensors.MotorEncoders)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtobufSensors.MotorEncoders)
    MergeFrom(*source);
  }
}

void ProtobufSensors_MotorEncoders::MergeFrom(const ProtobufSensors_MotorEncoders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtobufSensors.MotorEncoders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.langle() != 0) {
    set_langle(from.langle());
  }
  if (from.rangle() != 0) {
    set_rangle(from.rangle());
  }
}

void ProtobufSensors_MotorEncoders::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtobufSensors.MotorEncoders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtobufSensors_MotorEncoders::CopyFrom(const ProtobufSensors_MotorEncoders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtobufSensors.MotorEncoders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufSensors_MotorEncoders::IsInitialized() const {
  return true;
}

void ProtobufSensors_MotorEncoders::Swap(ProtobufSensors_MotorEncoders* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtobufSensors_MotorEncoders::InternalSwap(ProtobufSensors_MotorEncoders* other) {
  using std::swap;
  swap(langle_, other->langle_);
  swap(rangle_, other->rangle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProtobufSensors_MotorEncoders::GetMetadata() const {
  protobuf_sensors_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensors_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProtobufSensors_Temperature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtobufSensors_Temperature::kTempAccelerometerFieldNumber;
const int ProtobufSensors_Temperature::kTempCPUFieldNumber;
const int ProtobufSensors_Temperature::kTempPressureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtobufSensors_Temperature::ProtobufSensors_Temperature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensors_2eproto::scc_info_ProtobufSensors_Temperature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtobufSensors.Temperature)
}
ProtobufSensors_Temperature::ProtobufSensors_Temperature(const ProtobufSensors_Temperature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tempaccelerometer_, &from.tempaccelerometer_,
    static_cast<size_t>(reinterpret_cast<char*>(&temppressure_) -
    reinterpret_cast<char*>(&tempaccelerometer_)) + sizeof(temppressure_));
  // @@protoc_insertion_point(copy_constructor:ProtobufSensors.Temperature)
}

void ProtobufSensors_Temperature::SharedCtor() {
  ::memset(&tempaccelerometer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temppressure_) -
      reinterpret_cast<char*>(&tempaccelerometer_)) + sizeof(temppressure_));
}

ProtobufSensors_Temperature::~ProtobufSensors_Temperature() {
  // @@protoc_insertion_point(destructor:ProtobufSensors.Temperature)
  SharedDtor();
}

void ProtobufSensors_Temperature::SharedDtor() {
}

void ProtobufSensors_Temperature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProtobufSensors_Temperature::descriptor() {
  ::protobuf_sensors_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensors_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtobufSensors_Temperature& ProtobufSensors_Temperature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensors_2eproto::scc_info_ProtobufSensors_Temperature.base);
  return *internal_default_instance();
}


void ProtobufSensors_Temperature::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtobufSensors.Temperature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tempaccelerometer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temppressure_) -
      reinterpret_cast<char*>(&tempaccelerometer_)) + sizeof(temppressure_));
  _internal_metadata_.Clear();
}

bool ProtobufSensors_Temperature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtobufSensors.Temperature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 tempAccelerometer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tempaccelerometer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tempCPU = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tempcpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tempPressure = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temppressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtobufSensors.Temperature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtobufSensors.Temperature)
  return false;
#undef DO_
}

void ProtobufSensors_Temperature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtobufSensors.Temperature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tempAccelerometer = 1;
  if (this->tempaccelerometer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tempaccelerometer(), output);
  }

  // int32 tempCPU = 2;
  if (this->tempcpu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tempcpu(), output);
  }

  // int32 tempPressure = 3;
  if (this->temppressure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->temppressure(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtobufSensors.Temperature)
}

::google::protobuf::uint8* ProtobufSensors_Temperature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ProtobufSensors.Temperature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tempAccelerometer = 1;
  if (this->tempaccelerometer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tempaccelerometer(), target);
  }

  // int32 tempCPU = 2;
  if (this->tempcpu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tempcpu(), target);
  }

  // int32 tempPressure = 3;
  if (this->temppressure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->temppressure(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtobufSensors.Temperature)
  return target;
}

size_t ProtobufSensors_Temperature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtobufSensors.Temperature)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 tempAccelerometer = 1;
  if (this->tempaccelerometer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tempaccelerometer());
  }

  // int32 tempCPU = 2;
  if (this->tempcpu() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tempcpu());
  }

  // int32 tempPressure = 3;
  if (this->temppressure() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->temppressure());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtobufSensors_Temperature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtobufSensors.Temperature)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtobufSensors_Temperature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtobufSensors_Temperature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtobufSensors.Temperature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtobufSensors.Temperature)
    MergeFrom(*source);
  }
}

void ProtobufSensors_Temperature::MergeFrom(const ProtobufSensors_Temperature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtobufSensors.Temperature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tempaccelerometer() != 0) {
    set_tempaccelerometer(from.tempaccelerometer());
  }
  if (from.tempcpu() != 0) {
    set_tempcpu(from.tempcpu());
  }
  if (from.temppressure() != 0) {
    set_temppressure(from.temppressure());
  }
}

void ProtobufSensors_Temperature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtobufSensors.Temperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtobufSensors_Temperature::CopyFrom(const ProtobufSensors_Temperature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtobufSensors.Temperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufSensors_Temperature::IsInitialized() const {
  return true;
}

void ProtobufSensors_Temperature::Swap(ProtobufSensors_Temperature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtobufSensors_Temperature::InternalSwap(ProtobufSensors_Temperature* other) {
  using std::swap;
  swap(tempaccelerometer_, other->tempaccelerometer_);
  swap(tempcpu_, other->tempcpu_);
  swap(temppressure_, other->temppressure_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProtobufSensors_Temperature::GetMetadata() const {
  protobuf_sensors_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensors_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProtobufSensors_Misc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtobufSensors_Misc::kGasFieldNumber;
const int ProtobufSensors_Misc::kBatteryVoltageFieldNumber;
const int ProtobufSensors_Misc::kPressureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtobufSensors_Misc::ProtobufSensors_Misc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensors_2eproto::scc_info_ProtobufSensors_Misc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtobufSensors.Misc)
}
ProtobufSensors_Misc::ProtobufSensors_Misc(const ProtobufSensors_Misc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gas_, &from.gas_,
    static_cast<size_t>(reinterpret_cast<char*>(&pressure_) -
    reinterpret_cast<char*>(&gas_)) + sizeof(pressure_));
  // @@protoc_insertion_point(copy_constructor:ProtobufSensors.Misc)
}

void ProtobufSensors_Misc::SharedCtor() {
  ::memset(&gas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pressure_) -
      reinterpret_cast<char*>(&gas_)) + sizeof(pressure_));
}

ProtobufSensors_Misc::~ProtobufSensors_Misc() {
  // @@protoc_insertion_point(destructor:ProtobufSensors.Misc)
  SharedDtor();
}

void ProtobufSensors_Misc::SharedDtor() {
}

void ProtobufSensors_Misc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProtobufSensors_Misc::descriptor() {
  ::protobuf_sensors_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensors_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtobufSensors_Misc& ProtobufSensors_Misc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensors_2eproto::scc_info_ProtobufSensors_Misc.base);
  return *internal_default_instance();
}


void ProtobufSensors_Misc::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtobufSensors.Misc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pressure_) -
      reinterpret_cast<char*>(&gas_)) + sizeof(pressure_));
  _internal_metadata_.Clear();
}

bool ProtobufSensors_Misc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtobufSensors.Misc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 gas = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 batteryVoltage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batteryvoltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pressure = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtobufSensors.Misc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtobufSensors.Misc)
  return false;
#undef DO_
}

void ProtobufSensors_Misc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtobufSensors.Misc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gas = 1;
  if (this->gas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gas(), output);
  }

  // int32 batteryVoltage = 2;
  if (this->batteryvoltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->batteryvoltage(), output);
  }

  // float pressure = 3;
  if (this->pressure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pressure(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtobufSensors.Misc)
}

::google::protobuf::uint8* ProtobufSensors_Misc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ProtobufSensors.Misc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gas = 1;
  if (this->gas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gas(), target);
  }

  // int32 batteryVoltage = 2;
  if (this->batteryvoltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->batteryvoltage(), target);
  }

  // float pressure = 3;
  if (this->pressure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pressure(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtobufSensors.Misc)
  return target;
}

size_t ProtobufSensors_Misc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtobufSensors.Misc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 gas = 1;
  if (this->gas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gas());
  }

  // int32 batteryVoltage = 2;
  if (this->batteryvoltage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batteryvoltage());
  }

  // float pressure = 3;
  if (this->pressure() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtobufSensors_Misc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtobufSensors.Misc)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtobufSensors_Misc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtobufSensors_Misc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtobufSensors.Misc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtobufSensors.Misc)
    MergeFrom(*source);
  }
}

void ProtobufSensors_Misc::MergeFrom(const ProtobufSensors_Misc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtobufSensors.Misc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gas() != 0) {
    set_gas(from.gas());
  }
  if (from.batteryvoltage() != 0) {
    set_batteryvoltage(from.batteryvoltage());
  }
  if (from.pressure() != 0) {
    set_pressure(from.pressure());
  }
}

void ProtobufSensors_Misc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtobufSensors.Misc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtobufSensors_Misc::CopyFrom(const ProtobufSensors_Misc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtobufSensors.Misc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufSensors_Misc::IsInitialized() const {
  return true;
}

void ProtobufSensors_Misc::Swap(ProtobufSensors_Misc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtobufSensors_Misc::InternalSwap(ProtobufSensors_Misc* other) {
  using std::swap;
  swap(gas_, other->gas_);
  swap(batteryvoltage_, other->batteryvoltage_);
  swap(pressure_, other->pressure_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProtobufSensors_Misc::GetMetadata() const {
  protobuf_sensors_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensors_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProtobufSensors::InitAsDefaultInstance() {
  ::_ProtobufSensors_default_instance_._instance.get_mutable()->accelerometer_ = const_cast< ::ProtobufSensors_Accelerometer*>(
      ::ProtobufSensors_Accelerometer::internal_default_instance());
  ::_ProtobufSensors_default_instance_._instance.get_mutable()->gyroscope_ = const_cast< ::ProtobufSensors_Gyroscope*>(
      ::ProtobufSensors_Gyroscope::internal_default_instance());
  ::_ProtobufSensors_default_instance_._instance.get_mutable()->motorencoders_ = const_cast< ::ProtobufSensors_MotorEncoders*>(
      ::ProtobufSensors_MotorEncoders::internal_default_instance());
  ::_ProtobufSensors_default_instance_._instance.get_mutable()->temperature_ = const_cast< ::ProtobufSensors_Temperature*>(
      ::ProtobufSensors_Temperature::internal_default_instance());
  ::_ProtobufSensors_default_instance_._instance.get_mutable()->misc_ = const_cast< ::ProtobufSensors_Misc*>(
      ::ProtobufSensors_Misc::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtobufSensors::kAccelerometerFieldNumber;
const int ProtobufSensors::kGyroscopeFieldNumber;
const int ProtobufSensors::kMotorEncodersFieldNumber;
const int ProtobufSensors::kTemperatureFieldNumber;
const int ProtobufSensors::kMiscFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtobufSensors::ProtobufSensors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensors_2eproto::scc_info_ProtobufSensors.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtobufSensors)
}
ProtobufSensors::ProtobufSensors(const ProtobufSensors& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_accelerometer()) {
    accelerometer_ = new ::ProtobufSensors_Accelerometer(*from.accelerometer_);
  } else {
    accelerometer_ = NULL;
  }
  if (from.has_gyroscope()) {
    gyroscope_ = new ::ProtobufSensors_Gyroscope(*from.gyroscope_);
  } else {
    gyroscope_ = NULL;
  }
  if (from.has_motorencoders()) {
    motorencoders_ = new ::ProtobufSensors_MotorEncoders(*from.motorencoders_);
  } else {
    motorencoders_ = NULL;
  }
  if (from.has_temperature()) {
    temperature_ = new ::ProtobufSensors_Temperature(*from.temperature_);
  } else {
    temperature_ = NULL;
  }
  if (from.has_misc()) {
    misc_ = new ::ProtobufSensors_Misc(*from.misc_);
  } else {
    misc_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ProtobufSensors)
}

void ProtobufSensors::SharedCtor() {
  ::memset(&accelerometer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&misc_) -
      reinterpret_cast<char*>(&accelerometer_)) + sizeof(misc_));
}

ProtobufSensors::~ProtobufSensors() {
  // @@protoc_insertion_point(destructor:ProtobufSensors)
  SharedDtor();
}

void ProtobufSensors::SharedDtor() {
  if (this != internal_default_instance()) delete accelerometer_;
  if (this != internal_default_instance()) delete gyroscope_;
  if (this != internal_default_instance()) delete motorencoders_;
  if (this != internal_default_instance()) delete temperature_;
  if (this != internal_default_instance()) delete misc_;
}

void ProtobufSensors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProtobufSensors::descriptor() {
  ::protobuf_sensors_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensors_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtobufSensors& ProtobufSensors::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensors_2eproto::scc_info_ProtobufSensors.base);
  return *internal_default_instance();
}


void ProtobufSensors::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtobufSensors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && accelerometer_ != NULL) {
    delete accelerometer_;
  }
  accelerometer_ = NULL;
  if (GetArenaNoVirtual() == NULL && gyroscope_ != NULL) {
    delete gyroscope_;
  }
  gyroscope_ = NULL;
  if (GetArenaNoVirtual() == NULL && motorencoders_ != NULL) {
    delete motorencoders_;
  }
  motorencoders_ = NULL;
  if (GetArenaNoVirtual() == NULL && temperature_ != NULL) {
    delete temperature_;
  }
  temperature_ = NULL;
  if (GetArenaNoVirtual() == NULL && misc_ != NULL) {
    delete misc_;
  }
  misc_ = NULL;
  _internal_metadata_.Clear();
}

bool ProtobufSensors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtobufSensors)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ProtobufSensors.Accelerometer accelerometer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_accelerometer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ProtobufSensors.Gyroscope gyroscope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gyroscope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ProtobufSensors.MotorEncoders motorEncoders = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_motorencoders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ProtobufSensors.Temperature temperature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_temperature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ProtobufSensors.Misc misc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_misc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtobufSensors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtobufSensors)
  return false;
#undef DO_
}

void ProtobufSensors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtobufSensors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProtobufSensors.Accelerometer accelerometer = 1;
  if (this->has_accelerometer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_accelerometer(), output);
  }

  // .ProtobufSensors.Gyroscope gyroscope = 2;
  if (this->has_gyroscope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_gyroscope(), output);
  }

  // .ProtobufSensors.MotorEncoders motorEncoders = 3;
  if (this->has_motorencoders()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_motorencoders(), output);
  }

  // .ProtobufSensors.Temperature temperature = 4;
  if (this->has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_temperature(), output);
  }

  // .ProtobufSensors.Misc misc = 5;
  if (this->has_misc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_misc(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtobufSensors)
}

::google::protobuf::uint8* ProtobufSensors::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ProtobufSensors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProtobufSensors.Accelerometer accelerometer = 1;
  if (this->has_accelerometer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_accelerometer(), deterministic, target);
  }

  // .ProtobufSensors.Gyroscope gyroscope = 2;
  if (this->has_gyroscope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_gyroscope(), deterministic, target);
  }

  // .ProtobufSensors.MotorEncoders motorEncoders = 3;
  if (this->has_motorencoders()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_motorencoders(), deterministic, target);
  }

  // .ProtobufSensors.Temperature temperature = 4;
  if (this->has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_temperature(), deterministic, target);
  }

  // .ProtobufSensors.Misc misc = 5;
  if (this->has_misc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_misc(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtobufSensors)
  return target;
}

size_t ProtobufSensors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtobufSensors)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ProtobufSensors.Accelerometer accelerometer = 1;
  if (this->has_accelerometer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *accelerometer_);
  }

  // .ProtobufSensors.Gyroscope gyroscope = 2;
  if (this->has_gyroscope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gyroscope_);
  }

  // .ProtobufSensors.MotorEncoders motorEncoders = 3;
  if (this->has_motorencoders()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *motorencoders_);
  }

  // .ProtobufSensors.Temperature temperature = 4;
  if (this->has_temperature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *temperature_);
  }

  // .ProtobufSensors.Misc misc = 5;
  if (this->has_misc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *misc_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtobufSensors::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtobufSensors)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtobufSensors* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtobufSensors>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtobufSensors)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtobufSensors)
    MergeFrom(*source);
  }
}

void ProtobufSensors::MergeFrom(const ProtobufSensors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtobufSensors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_accelerometer()) {
    mutable_accelerometer()->::ProtobufSensors_Accelerometer::MergeFrom(from.accelerometer());
  }
  if (from.has_gyroscope()) {
    mutable_gyroscope()->::ProtobufSensors_Gyroscope::MergeFrom(from.gyroscope());
  }
  if (from.has_motorencoders()) {
    mutable_motorencoders()->::ProtobufSensors_MotorEncoders::MergeFrom(from.motorencoders());
  }
  if (from.has_temperature()) {
    mutable_temperature()->::ProtobufSensors_Temperature::MergeFrom(from.temperature());
  }
  if (from.has_misc()) {
    mutable_misc()->::ProtobufSensors_Misc::MergeFrom(from.misc());
  }
}

void ProtobufSensors::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtobufSensors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtobufSensors::CopyFrom(const ProtobufSensors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtobufSensors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufSensors::IsInitialized() const {
  return true;
}

void ProtobufSensors::Swap(ProtobufSensors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtobufSensors::InternalSwap(ProtobufSensors* other) {
  using std::swap;
  swap(accelerometer_, other->accelerometer_);
  swap(gyroscope_, other->gyroscope_);
  swap(motorencoders_, other->motorencoders_);
  swap(temperature_, other->temperature_);
  swap(misc_, other->misc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProtobufSensors::GetMetadata() const {
  protobuf_sensors_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensors_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ProtobufSensors_Accelerometer* Arena::CreateMaybeMessage< ::ProtobufSensors_Accelerometer >(Arena* arena) {
  return Arena::CreateInternal< ::ProtobufSensors_Accelerometer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ProtobufSensors_Gyroscope* Arena::CreateMaybeMessage< ::ProtobufSensors_Gyroscope >(Arena* arena) {
  return Arena::CreateInternal< ::ProtobufSensors_Gyroscope >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ProtobufSensors_MotorEncoders* Arena::CreateMaybeMessage< ::ProtobufSensors_MotorEncoders >(Arena* arena) {
  return Arena::CreateInternal< ::ProtobufSensors_MotorEncoders >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ProtobufSensors_Temperature* Arena::CreateMaybeMessage< ::ProtobufSensors_Temperature >(Arena* arena) {
  return Arena::CreateInternal< ::ProtobufSensors_Temperature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ProtobufSensors_Misc* Arena::CreateMaybeMessage< ::ProtobufSensors_Misc >(Arena* arena) {
  return Arena::CreateInternal< ::ProtobufSensors_Misc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ProtobufSensors* Arena::CreateMaybeMessage< ::ProtobufSensors >(Arena* arena) {
  return Arena::CreateInternal< ::ProtobufSensors >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
